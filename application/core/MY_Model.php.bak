<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class MY_Model extends CI_Model
{

    protected $table_name = '';
    protected $primary_key = 'id';

	/**
	 * Konstruktor
	 */
	function __construct()
	{


die('sdfsdfdsf');

        parent::__construct();
        $this->load->database('default', true);
//        $this->db = $this->load->database('default', true);

        // Helper ustawiający nazwę tabeli na podstawie nazwy modelu (z liczby poj. na liczbę mnogą).
        // W razie potrzeby zastosowania innej nazwy - zmienić wartość $table_name w modelu danego modułu
        $this->load->helper('inflector');
        if ( ! $this->table_name) {
            $this->table_name = strtolower(plural(get_class($this)));
        }
	}

    /**
     * Pobiera jeden rekord na podstawie ID
     *
     * @param int $id
     *
     * @return mixed
     */
    public function get(int $id)
    {
        return $this->db->get_where($this->table_name, [$this->primary_key => $id])->row();
    }

    /**
     * Pobiera wszystkie rekordy lub na podstawie kryteriów
     *
     * @param string $fields
     * @param array  $where
     * @param string $table
     * @param string $limit
     * @param string $order_by
     * @param string $group_by
     * @param bool   $only_active - Ogranicza wyniki tylko do aktywnych rekordów
     *
     * @return array
     */
    public function get_all($fields = '', $where = [], $table = '', $limit = '', $order_by = '', $group_by = '', bool $only_active = true)
    {
        $data = [];
        if ($fields != '') {
            $this->db->select($fields);
        }
        if (count($where)) {
            $this->db->where($where);
        }
        if ($only_active) {
            $this->db->where(['is_active' => 1]);
        }
        if ($table != '') {
            $this->table_name = $table;
        }
        if ($limit != '') {
            $this->db->limit($limit);
        }
        if ($order_by != '') {
            $this->db->order_by($order_by);
        }
        if ($group_by != '') {
            $this->db->group_by($group_by);
        }
        $Q = $this->db->get($this->table_name);
        if ($Q->num_rows() > 0) {
            foreach ($Q->result_array() as $row) {
                $data[] = $row;
            }
        }
        $Q->free_result();

        return $data;
    }

    /**
     * Tworzy nowy rekord
     *
     * @param array $data
     *
     * @return bool
     */
    public function insert(array $data)
    {
        $data['date_created']    = $data['date_updated'] = date('Y-m-d H:i:s');
        $data['created_from_ip'] = $data['updated_from_ip'] = $this->input->ip_address();
        $success                 = $this->db->insert($this->table_name, $data);
        if ($success) {
            return $this->db->insert_id();
        } else {
            return false;
        }
    }

    /**
     * Aktualizuje istniejący rekord
     *
     * @param array $data
     * @param int   $id
     *
     * @return mixed
     */
    public function update(array $data, int $id)
    {
        $this->db->where($this->primary_key, $id);

        $data['date_updated']    = date('Y-m-d H:i:s');
        $data['updated_from_ip'] = $this->input->ip_address();

        return $this->db->update($this->table_name, $data);
    }

    /**
     * Usuwa istniejący rekord trwale lub ustawia flagę (domyślnie)
     *
     * @param int  $id
     * @param bool $soft_delete - TRUE - miękkie usuwanie, FALSE - trwałe usuwanie
     *
     * @return mixed
     */
    public function delete(int $id, bool $soft_delete = true)
    {
        $this->db->where($this->primary_key, $id);

        if($soft_delete) {
            $data['is_active'] = 0;
            $res =  $this->db->update($this->table_name, $data);
        }
        else {
            $res = $this->db->delete($this->table_name);
        }

        return $res;
    }
    	
}
